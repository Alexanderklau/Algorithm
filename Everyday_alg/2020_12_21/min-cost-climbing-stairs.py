# coding: utf-8

__author__ = 'Yemilice_lau'


"""
数组的每个索引作为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 cost[i](索引从0开始)。

每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。

您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。

示例 1:

输入: cost = [10, 15, 20]
输出: 15
解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。
"""

"""
又是不说人话的一道题

终极意思就是

在首尾都加一个0
分别代表地面，和楼顶
数组的每一个数字代表从当前楼梯迈出所需要耗费的体力
从地面开始，第一步可以选择第0阶或者第1阶，都不费力
最终要求到达最后一个0（楼顶）所耗费的体力最少。

这里又要用动态规划
"""

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        p1,p2 = 0, 0
        for i in range(2, len(cost)+1):
            p1,p2 =p2, min(p2 + cost[i-1], p1 + cost[i-2])
        return p2

